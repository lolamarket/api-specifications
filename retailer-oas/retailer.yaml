openapi: 3.0.3
info:
  title: Retailer API [DRAFT]
  description: |-
    This is the official OpenAPI specification for Retailer API V1.

    ## Concepts
      [TBD]

    ### Discussion points
      - [tech] Authentication and Authorization strategy;
        - [product] define flow to send credentials (eg.: clientId and secret) to the retailer;
      - [tech] Geographic areas [representation](https://opencagedata.com/guides/how-to-think-about-postcodes-and-geocoding):
        - many countries do not have any form of postal code at all
        - many countries and territories of the world use the postal service of other countries (thus, we might need to ask for the country code along with the postal code)
      - Notifications types:
        - Webhooks:
          - [product] define all types of events to be subscribed by the retailer
          - define the best strategy for events subscription:
            a) [tech] /subscribe and /unsubscribe endpoints (or similar)
            b) [product] set up by us, as part o the initial retailer configuration process
        - [product] (?) emails:
          - if so, define all types of emails and its receivers
        - [product] (?) others:
      - [tech] Final API data models / schemas / concepts (eg.: for location, fleet, capacity, order, etc)
      - [product] Does the time slots availability varies depending on the type of services? Eg.: Availability for pickup vs deliver vs ...
        - (looks like yes)
      - [product] Clarify integration/communication points with the Retailer after the moment of order placement (Fulfilment flow)
        - [tech] create endpoints

# TODO: (?) re-think and rename some concepts: eg.: picking-locations to picking-places?
# TODO: review auth token generation - [https://swagger.io/docs/specification/authentication/oauth2/]
# TODO: review revoke token [https://docs.instacart.com/connect/api/oauth/revoke_access_token]
# TODO: POST /picking-locations: bulk or single creation?
# TODO: GET /delivery-area: what if there's no postal code?

  version: 1.0.0
servers:
  - url: https://api.example.com/retailer/v1
    description: Production server (live data)
  - url: https://sandbox-api.example.com/v1
    description: Sandbox server (test data)
tags:
  - name: auth
  - name: delivery-areas
  - name: picking-locations
  - name: time-slots
  - name: orders
paths:
  # Authentication
  /oauth/token:
    post:
      tags:
        - auth
      summary: Generate an access token
      description: |
        Returns a new access token.

        The access token must be included in all other requests as a Bearer token for authentication purposes.

        Before you start, make sure you have been given a client ID and secret key.

        The token is valid for ***[X time]***. During this period, reuse the same token. After that, a new token must be generated.
      operationId: generateAccessToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                clientId:
                  type: string
                clientSecret:
                  type: string
                grantType:
                  type: string
                scope:
                  type: string
                code:
                  type: string
                redirectUri:
                  type: string
              required:
                - clientId
                - clientSecret
                - grantType
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessToken'
  /oauth/token/revoke:
    post:
      tags:
        - auth
      summary: Revoke an access token
      description: |
        Revokes any access token.

        You need to include your client ID and secret and the access token in the request body.
      operationId: revokeAccessToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                clientId:
                  type: string
                clientSecret:
                  type: string
                token:
                  type: string
              required:
                - clientId
                - clientSecret
                - token
      responses:
        '200':
          description: OK

  # Service availability
  /service-availability:
    get:
      summary: 'Check service availability.'
      description: 'Returns the service availability for a given postal code.'
      operationId: checkAvailability
      tags:
        - service-availability
      parameters:
        - name: postalcode
          in: query
          description: The postal code to check service availability for.
          required: true
          type: string
      responses:
        200:
          description: OK Service is available for the given postal code.
          content:
            application/json:
              schema:
                type: object
                properties:
                  pickingLocationID:
                    type: integer
                    description: The ID of the picking location for the given postal code,
                    should be used to check the catalog to display to the customer.
                  deliveryAreaID:
                    type: integer
                    description: The ID of the delivery area for the given postal code,
                    should be used later to check the available timeslot.
                  availableServices:
                    type: array
                    description: The available services for the given postal code
                    items:
                      type: string
        400:
          description: Invalid postal code format.
        404:
          description: Service not available for the given postal code.

  # Picking Locations
  /picking-location:
    post:
      summary: 'Create a Picking Location'
      description: 'Create a Picking Location.'
      operationId: createPickingLocation
      tags:
        - picking-locations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PickingLocation'
              required:
                - name
                - coords
                - postalCode
                - addressLine1
                - countryCode
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PickingLocation'
                description: The created picking location object
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid request, some fields are missing"


  /picking-location/{id}:
    get:
      summary: 'Find picking location by ID'
      description:
        Returns a single picking location for a given ID.
      operationId: findPickingLocationById
      tags:
        - picking-locations
      parameters:
        - name: id
          in: path
          description: Picking location ID
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PickingLocation'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid request, some fields are missing"
        404:
          description: Invalid ID

    patch:
      summary: 'Update an existing picking location'
      description:
        Update a picking location for given location ID.
      operationId: updatePickingLocation
      tags:
        - picking-locations
      parameters:
        - name: id
          in: path
          description: Picking location ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: # TODO: WIP
              schema:
                $ref: '#/components/schemas/PickingLocation'
                required:
                  - name
                  - coords
                  - postalCode
                  - addressLine1
                  - countryCode
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PickingLocation'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid request, some fields are missing"
        404:
          description: Invalid ID

    delete:
      summary: 'Delete a picking location'
      description: ''
      operationId: deletePickingLocation
      tags:
        - picking-locations
      parameters:
        - name: id
          in: path
          description: Picking location ID to delete
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '404':
          description: Invalid ID

  /picking-location/{id}/schedule:
    post:
      summary: 'Creates a Picking Location Schedule'
      description: 'Inform the schedule of the picking location'
      operationId: createPickingLocationSchedule
      tags:
        - picking-locations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PickingLocation'
              required:
                - id
                - opening_hours
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Picking Location schedule updated successfully"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid request, some fields are missing"
        404:
          description: Picking Location not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Picking Location with id not found"
    patch:
      summary: 'Update a Picking Location Schedule'
      description: 'Update the schedule of a Picking Location'
      operationId: updatePickingLocationSchedule
      tags:
        - picking-locations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PickingLocation'
              required:
                - id
                - opening_hours
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Picking Location schedule updated successfully"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid request, some fields are missing"
        404:
          description: Picking Location not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Picking Location with id not found"


  # Delivery Areas
  /delivery-area:
    get:
      summary: 'Retrieve delivery area'
      description: |
        Returns details of single Delivery Area.

        Can be used to validate the delivery service coverage in a given country and postal code or at certain coordinates
        if query filters are passed.
      operationId: findDeliveryArea
      tags:
        - delivery-area
      parameters:
        - in: query
          name: query
          required: true
          style: form
          explode: true

          description: |
            ```YAML
            schema:
              oneOf:
                - required: [lon, lat]
                - required: [postalCode, countryCode]
            ```
          schema:
            type: object
            properties:
              lon:
                type: string
              lat:
                type: string
              postalCode:
                type: string
              countryCode:
                type: string
                format: ISO 3166-1
            oneOf:
              - required: [lon, lat]
              - required: [postalCode, countryCode]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeliveryArea'

  /delivery-area/{id}:
    get:
      summary: 'Find delivery area by ID'
      description:
        Returns a single delivery area for a given ID.
      operationId: findDeliveryAreaById
      tags:
        - delivery-area
      parameters:
        - name: id
          in: path
          description: Delivery Area ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeliveryArea'

  /delivery-area/{id}/delivery-timeslots:
    get:
      summary: Get time slots availability for a given delivery area
      description: Returns a preview of the next available time slots for a given delivery area and date.
      operationId: getTimeSlotsAvailability
      tags:
        - time-slots
      parameters:
        - name: id
          in: path
          description: Delivery area ID
          required: true
          schema:
            type: string
        - name: fromDate
          in: query
          required: true
          schema:
            type: string
            format: ISO 8601
        - name: quantity
          in: query
          required: true
          description: Number of slots to be displayed
          schema:
            type: number
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeSlotAvailability'
        '400':
          description: Invalid ID

  #TODO: Time Slots
    #  possibilites :
    # /picking-location/{id}/time-slots/availability
    # /picking-location/{id}/time-slots/preview
    # /delivery-area/{id}/time-slots/availability
    # /delivery-area/{id}/time-slots/preview

    # /service-area/{id}/time-slots/availability
    # /service-area/{id}/time-slots/preview
    # /time-slots/availability
    # /slots-availability
    # service-availability/

    # /delivery-areas/{id}/schedules/preview

    # /time-slots/next
    # /time-slots/next-available
    # /time-slots/preview

  # Orders
  /orders:
    post:
      summary: "Create a new order"
      description: "Create a new order with the provided information"
      operationId: "createOrder"
      tags:
        - orders
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: "OK"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: "Bad Request"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message
                  errorCode:
                    type: string
                    description: Error code
                    enum:
                      - "TIMESLOT_NOT_AVAILABLE"
                      - "ORDER_TOO_HEAVY"
                      - "INVALID_SHIPPING_ADDRESS"
                      - "INVALID_CUSTOMER_DATA"
                      - "ORDER_TOO_HEAVY"
                      - "MAX_ORDERS_EXCEEDED"
                      - "INVALID_PRODUCT_QUANTITY"
                      - "ORDER_TOTAL_MISMATCH"
                      - "DUPLICATE_ORDER"
                  errors:
                    type: array
                    items:
                      type: string
                      description: List of error details

components:
  schemas:

    AccessToken:
      type: object
      properties:
        token:
          type: string
        tokenType:
          type: string
        scope:
          type: string
        expiresIn:
          type: integer
        createdAt:
          type: integer

    PickingLocation:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          description: The unique identifier of the picking location
        name:
          type: string
          description: The name of the picking location.
          example: "Warehouse 1"
        coords:
          $ref: '#/components/schemas/GeoCoordinates'
        postalCode:
          type: string
          description: The postal code of the picking location
          example: "90210"
        addressLine1:
          type: string
          description: The first line of the address of the picking location
          example: "123 Main St"
        addressLine2:
          type: string
          description: The second line of the address of the picking location
          example: "Suite 456"
        countryCode:
          type: string
          format: ISO 3166-1
          description: The country code of the picking location
          example: "PL"
        person_of_contact:
          type: string
          description: The person of contact at the picking location
          example: "John Smith"
        email:
          type: string
          format: email
          description: The email of the person of contact
          example: "john.smith@example.com"
        phone:
          type: string
          format: phone
          description: The phone number of the person of contact
          example: "+1 555 555 5555"
        has_parking:
          type: boolean
          description: Indicates if the picking location has parking available
          example: true
        status:
          type: string
          enum: [active, temporary_closed]
          description: The status of the picking location, whether it is active or temporarily closed
          example: "active"


    PickingLocationSchedule:
      type: object
      properties:
        id:
          type: integer
          description: The unique identifier of the picking location
          example: 1
        opening_hours:
          type: array
          description: An array of objects that represent the opening hours of the Picking Location.
          items:
            type: object
            properties:
              day:
                type: string
                enum: [monday, tuesday, wednesday, thursday, friday, saturday, sunday]
                description: The day of the week.
              start:
                type: string
                format: time
                description: The starting time for the day
                example: "09:00:00"
              end:
                type: string
                format: time
                description: The ending time for the day
                example: "17:00:00"
          example: [{ "day": "monday", "start": "09:00:00", "end": "17:00:00" }, { "day": "tuesday", "start": "09:00:00", "end": "17:00:00" }]
        closed_dates:
          type: array
          description: An array of dates when the picking location will be closed.
          items:
            type: string
            format: date
          example: ["2022-12-25", "2022-12-26"]

    DeliveryArea:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        coords:
          $ref: '#/components/schemas/GeoCoordinates'
        countryCode:
          type: string
          format: ISO 3166-1
        serviceArea:
          $ref: '#/components/schemas/ServiceArea'

    Order:
      type: object
      properties:
        id:
          type: string

    ServiceArea: #TODO: wip operational area
      type: object
      properties:
        id:
          type: string

    GeoCoordinates:
      type: object
      properties:
        lat:
          type: number
          description: Latitude in decimal degrees
        lon:
          type: number
          description: Longitude in decimal degrees

    Capacity:
      type: object
      properties:
        total:
          type: number
          description: Total capacity of the location
          example: 100
        occupied:
          type: number
          description: Occupied capacity of the location
          example: 20

    TimeSlot:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of the time slot
          example: "slot1"
        fromDate:
          type: string
          format: ISO 8601
          description: The starting time of the timeslot
          example: "2023-01-11T14:00:00+00:00"
        toDate:
          type: string
          format: ISO 8601
          description: The ending time of the timeslot
          example: "2023-01-11T15:00:00+00:00"

    TimeSlotAvailability:
      type: array
      items:
        type: object
        properties:
          timeSlot:
            $ref: '#/components/schemas/TimeSlot'
          capacity:
            $ref: '#/components/schemas/Capacity'
          available:
            type: boolean
            description: Indicates if the user can select this timeslot. Usually
            if still have free capacity.
            example: true

    Schedule:
      type: object
      properties:
        id:
          type: string
        slots:
          type: array
          items:
            $ref: '#/components/schemas/TimeSlotAvailability'

    OrderArticle:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of the product
          example: "12345"
        sku:
          type: string
          description: Stock Keeping Unit of the product
          example: "12345"
        requestedQuantity:
          type: number
          description: The requested quantity of the product in the order
          example: 10
        unitOfMeasure:
          type: string
          description: The unit of measure of the product
          example: "each"
        name:
          type: string
          description: The name of the product
          example: "Product A"
        customerSpecialNote:
          type: string
          description: A description of any special request from the customer.
          example: "I want it in small slices"
        productImage:
          type: string
          format: uri
          description: The URL of the product image
          example: "https://example.com/productA.jpg"
        longDescription:
          type: string
          description: The long description of the product
          example: "This is a long description of Product A, including details about its features and specifications"
        unitOfSale:
          type: string
          description: The unit of sale of the product
          example: "case"
        discount:
          type: number
          format: percent
          description: The discount applied to the product
          example: 0.1
        buyingPrice:
          type: number
          format: currency
          description: The buying price of the product
          example: 10.99
        unitPrice:
          type: number
          format: currency
          description: The unit price of the product
          example: 11.99
        totalPrice:
          type: number
          format: currency
          description: The total price of the product considering the quantity
          example: 119.9
        estimatedWeight:
          type: number
          format: weight
          description: The estimated weight of the product
          example: 12.5
        replacementPreference:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                description: Unique identifier of the product
                example: "12345"
              sku:
                type: string
                description: Stock Keeping Unit of the product
                example: "12345"
              name:
                type: string
                description: The name of the product
                example: "Product A"
              productImage:
                type: string
                format: uri
                description: The URL of the product image
                example: "https://example.com/productA.jpg"
              unitPrice:
                type: number
                format: currency
                description: The unit price of the product
                example: 11.99

    CustomerInfo:
      type: object
      properties:
        customerName:
          type: string
          description: The name of the customer
          example: "John Smith"
        customerId:
          type: string
          description: The unique identifier of the customer
          example: "customer1"
        email:
          type: string
          format: email
          description: The email of the customer
          example: "john.smith@example.com"
        phone:
          type: string
          format: phone
          description: The phone number of the customer
          example: "+1 (555) 555-5555"
        billingName:
          type: string
          description: The name of the customer for billing purposes
          example: "John Smith"
        billingAddress:
          type: string
          description: The billing address of the customer
          example: "123 Main St, Suite 200, Anytown USA 12345"
        vatNumber:
          type: string
          description: The VAT number of the customer, if applicable
          example: "1234567890"

    ShippingAddress:
      type: object
      properties:
        addressLine1:
          type: string
          description: The first line of the shipping address
          example: "123 Main St"
        addressLine2:
          type: string
          description: The second line of the shipping address
          example: "Suite 200"
        additionalInfo:
          type: string
          description: Any additional info that the customer would like to specify
          example: "If I am not at home please give it to the neighbour"
        city:
          type: string
          description: The city of the shipping address
          example: "Warsaw"
        state:
          type: string
          description: The state or province of the shipping address
          example: "Poland"
        postalCode:
          type: string
          description: The postal code of the shipping address
          example: "123-545"
        coords:
          $ref: '#/components/schemas/GeoCoordinates'

    Order:
      type: object
      properties:
        orderId:
          type: string
          description: The unique identifier of the order
          example: "order1"
        timeSlot:
          $ref: '#/components/schemas/TimeSlot'
          description: The time slot selected for the order
        articles:
          type: array
          items:
            $ref: '#/components/schemas/OrderArticle'
          description: The array of articles included in the order
        customerInfo:
          $ref: '#/components/schemas/CustomerInfo'
          description: The customer information related to the order
        shippingAddress:
          $ref: '#/components/schemas/CustomerInfo'
          description: Where the order should be delivered.
        totalPrice:
          type: number
          format: currency
          description: The total price of the order
          example: 119.9
        estimatedWeight:
          type: number
          format: weight
          description: The estimated weight of the order
          example: 12.5

    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
