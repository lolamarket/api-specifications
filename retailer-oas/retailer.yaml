openapi: 3.0.3
info:
  title: Retailer API [DRAFT]
  version: 1.0.1
  description: |-
    This is the official OpenAPI specification for Retailer API V1.

    ## Concepts
    - **OMS (Order Management System)**: A software system used to manage and track customer orders, from receiving the order to delivering the items to the customer.
    - **Picking Location**: The physical location within a warehouse, distribution centre or store where the items for an order are prepared for delivery. It is the place where products are stored, organized and picked.
    - **Order**: a customer's request to purchase one or more articles. An order includes the customer's selected articles, shipping information, some customer preferences, and the preferred Timeslot. It will be tracked by a unique order ID and will transition between different statuses. Depending on the company's policies, orders can also be canceled, refunded or modified.
    - **Timeslot**: a timeslot is a specific window of time during which a customer can pick up their order or receive a delivery. Timeslots are usually divided into particular intervals, such as every hour or every two hours. The system may offer different timeslots depending on the picking location, days of the week, or other factors. Customers can select a timeslot when placing their order; availability can change depending on the demand.
    - **Shopper**: An individual responsible for fulfilling an order by picking the products and preparing them for delivery.
    - **Order status**: The current stage of an order, reflecting its progress and whether it is confirmed, assigned, in transit, delivered, on hold, rejected, canceled, or returned.
    - **Item status**: The current stage of an individual item within an order, reflecting its progress and whether it is pending, picked, not found, or replaced.
    - **Order rescheduling**: The process of moving an order to a different timeslot, usually due to a change in delivery availability or customer preference.
    - **Event**: An occurrence or change in the state of an order, such as receipt of the order, confirmation, assignment, delivery, or cancellation, that can trigger a webhook notification to subscribed parties.

    ## Webhooks

    Webhooks allow your application to subscribe to specific events that occur within the API.
    Our API includes webhooks to notify you of status changes on an order.
    By subscribing to these webhooks, you can receive real-time updates on the status of your orders, without the need to continuously poll the API.

    <img src="http://lolamarket.statics.prod.s3.amazonaws.com/lola-help/order_state_machine.jpg" />
    1. `order.received`: Order received on the OMS and waiting for processing.
    2. `order.confirmed`: Order confirmed by the OMS, waiting for shopper assignment.
    3. `order.allocated`: Order assigned and accepted by a shopper. In some cases, the order may be assigned to multiple resources (picker, courier).
    4. `order.rescheduled`: Order has been moved to a different timeslot, needs to be allocated.
    5. `order.in.picking`: Shopper started picking items. Each product in the order will have their own status.
        1. `item.pending`
        2. `item.picked`
        3. `item.not.found`
        4. `item.replaced`
    6. `order.picked`: Shopper finished picking order items and will go to the cashier.
    7. `order.in.transit`: Order on its way to the customer.
    8. `order.delivered`: Order delivered to the customer.
    9. `order.on.hold`: Order on hold for some reason that may include:
        1. In warehouse: order with partial picking for some reason.
        2. Fraud detected: Retailer detects a fraud attempt by the shopper and order has been blocked.
        3. Order not delivered: Order can not be delivered to the customer and delivery has been postponed.
    10. `order.rejected`: Order rejected by the OMS for some reason.
    11. `order.canceled`: Order has been canceled before left the store. A cancelation could be initiated by the customer, the retailer, the shopper, or the OMS
    12. `order.returned`: Order has been canceled after leaving the store so need to be returned to picking location.

    In this [page](https://github.com/lolamarket/api-specifications/blob/main/retailer-oas/webhooks.md), you will find examples of the payload for each event type that can be triggered by an order status change.

servers:
  - url: https://api.example.com/retailer/v1
    description: Production server (live data)
  - url: https://sandbox-api.example.com/v1
    description: Sandbox server (test data)

tags:
  - name: auth
  - name: service-availability
  - name: picking-locations
  - name: timeslots
  - name: orders
  - name: webhooks

paths:
  # Authentication
  /oauth/token:
    $ref: "./paths/auth/post-token.yaml"
  /oauth/token/revoke:
    $ref: "./paths/auth/post-token-revoke.yaml"

  # Service availability
  /service-availability:
    $ref: "./paths/service-availability/get.yaml"
    
  # Picking Locations
  /picking-locations:
    $ref: "./paths/picking-locations/picking-locations.yaml"
  /picking-locations/{id}: 
    $ref: "./paths/picking-locations/picking-locations-id.yaml"
  /picking-locations/{id}/schedule:
    $ref: "./paths/picking-locations/picking-locations-schedule.yaml"

  # Timeslots
  /timeslots:
    $ref: "./paths/timeslots/timeslots.yaml"
  /timeslots/{id}/reservations:
    $ref: "./paths/timeslots/timeslots-reservations.yaml"
  /timeslots/{timeslotId}/reservations/{reservationId}/cancel:
    $ref: "./paths/timeslots/timeslots-reservations-cancel.yaml"

  # Orders
  /orders:
    $ref: "./paths/orders/orders.yaml"
  /orders/{id}:
    $ref: "./paths/orders/orders-id.yaml"
  /orders/{id}/cancel:
    $ref: "./paths/orders/orders-id-cancel.yaml"

  # Webhooks
  /webhooks/subscriptions/event-types:
    $ref: "./paths/webhooks/subscriptions-event-types.yaml"
  /webhooks/subscriptions:
    $ref: "./paths/webhooks/subscriptions.yaml"
  /webhooks/subscriptions/{id}:
    $ref: "./paths/webhooks/subscriptions-id.yaml"
  /webhooks/subscriptions/{id}/test:
    $ref: "./paths/webhooks/subscriptions-id-test.yaml"

components:
  schemas:
    $ref: "./schemas/_index.yaml"
