openapi: 3.0.3
info:
  title: Retailer API [DRAFT]
  version: 1.0.0
  description: |-
    This is the official OpenAPI specification for Retailer API V1.

    ## Concepts
    - Picking Location: The physical location within a warehouse, distribution centre or store where the items for an order are prepared for delivery. It is the place where products are stored, organized and picked.

    - Delivery Area: a geographic region where our service provides service. A Delivery Area can be defined by zip codes, city or state boundaries, or other geographic parameters. In the context of a grocery website, a delivery area is a region where customers can place orders for delivery or pickup at a specific location. A company may have multiple delivery areas depending on their coverage, and the delivery areas can change over time to better serve their customers. Available Timeslots depend on the delivery area.

    - Order: a customer's request to purchase one or more articles. An order includes the customer's selected articles, shipping information, some customer preferences, and the preferred Timeslot. It will be tracked by a unique order ID and will transition between different statuses. Depending on the company's policies, orders can also be canceled, refunded or modified.

    - Timeslot: a timeslot is a specific window of time during which a customer can pick up their order or receive a delivery. Timeslots are usually divided into particular intervals, such as every hour or every two hours. The system may offer different timeslots depending on the delivery area, days of the week, or other factors. Customers can select a timeslot when placing their order; availability can change depending on the demand.

servers:
  - url: https://api.example.com/retailer/v1
    description: Production server (live data)
  - url: https://sandbox-api.example.com/v1
    description: Sandbox server (test data)

tags:
  - name: auth
  - name: picking-locations
  - name: service-availability
  - name: timeslots
  - name: orders
  - name: webhooks

paths:
  # Authentication
  /oauth/token:
    post:
      tags:
        - auth
      summary: Generate an access token
      description: |
        Returns a new access token.

        The access token must be included in all other requests as a Bearer token for authentication purposes.

        Before you start, make sure you have been given a `clientId` and `clientSecret`.

        The token is valid for ***[X time]***. During this period, reuse the same token. After that, a new token must be generated.
      operationId: generateAccessToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                clientId:
                  type: string
                clientSecret:
                  type: string
                grantType:
                  type: string
                scope:
                  type: string
                code:
                  type: string
                redirectUri:
                  type: string
              required:
                - clientId
                - clientSecret
                - grantType
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessToken'
  /oauth/token/revoke:
    post:
      tags:
        - auth
      summary: Revoke an access token
      description: |
        Revokes any access token.

        You need to include your `clientId` and secret and the access token in the request body.
      operationId: revokeAccessToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                clientId:
                  type: string
                clientSecret:
                  type: string
                token:
                  type: string
              required:
                - clientId
                - clientSecret
                - token
      responses:
        '200':
          description: OK

  # Service availability
  /service-availability:
    get:
      summary: Check service availability
      description: Return service availability information for a given postal code.
      operationId: checkAvailability
      tags:
        - service-availability
      parameters:
        - name: postalCode
          in: query
          description: The postal code to check service availability for.
          required: true
          schema:
            type: string
        - name: countryCode
          in: query
          description: The ISO 3166 country code corresponding to the given postal code.
          required: true
          schema:
            type: string
            format: ISO 3166-1

      responses:
        '200':
          description: Service is available for the given postal code.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceAvailability'
        '400':
          description: Invalid postal code or country code format.
        '404':
          description: Service not available for the given postal code and country code.

  # Picking Locations
  /picking-locations:
    post:
      summary: Create a Picking Location
      description: Create a Picking Location.
      operationId: createPickingLocation
      tags:
        - picking-locations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PickingLocation'
              required:
                - name
                - coords
                - postalCode
                - addressLine1
                - countryCode
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PickingLocation'
                description: The created picking location object
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid request, some fields are missing"


  /picking-locations/{id}:
    get:
      summary: Find a Picking Location by identifier
      description: Get a single Picking Location for a given identifier.
      operationId: findPickingLocationById
      tags:
        - picking-locations
      parameters:
        - name: id
          in: path
          description: Picking location identifier
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PickingLocation'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid request, some fields are missing"
        '404':
          description: Picking Location not found

    patch:
      summary: Update an existing Picking Location
      description: Update a Picking Location for a given identifier.
      operationId: updatePickingLocation
      tags:
        - picking-locations
      parameters:
        - name: id
          in: path
          description: Picking Location identifier
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PickingLocation'
              required:
                - name
                - coords
                - postalCode
                - addressLine1
                - countryCode
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PickingLocation'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid request, some fields are missing"
        '404':
          description: Picking Location not found

    delete:
      summary: Delete an existing Picking Location
      description: Update a Picking Location for a given identifier.
      operationId: deletePickingLocation
      tags:
        - picking-locations
      parameters:
        - name: id
          in: path
          description: Picking Location identifier
          required: true
          schema:
            type: string
      responses:
        204:
          description: No Content
        '404':
          description: Picking Location not found

  /picking-locations/{id}/schedule:
    get:
      summary: Get a Picking Location's Schedule
      description: Get the opening hours and closed days of a Picking Location.
      operationId: getPickingLocationSchedule
      tags:
        - picking-locations
      parameters:
        - name: id
          in: path
          description: Picking location identifier
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PickingLocationSchedule'
        '404':
          description: Picking Location not found

    post:
      summary: Create a Picking Location Schedule
      description: Set opening hours and closed days of a Picking Location.
      operationId: createPickingLocationSchedule
      tags:
        - picking-locations
      parameters:
        - name: id
          in: path
          description: Picking location identifier
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PickingLocationSchedule'
              required:
                - id
                - openingHours
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Picking Location schedule updated successfully"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid request, some fields are missing"
        '404':
          description: Picking Location not found

    patch:
      summary: Update a Picking Location Schedule
      description: Update opening hours and closed days of a Picking Location.
      operationId: updatePickingLocationSchedule
      tags:
        - picking-locations
      parameters:
        - name: id
          in: path
          description: Picking location identifier
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PickingLocationSchedule'
              required:
                - id
                - openingHours
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Picking Location schedule updated successfully"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid request, some fields are missing"
        '404':
          description: Picking Location not found

  # Timeslots

  /timeslots:
    get:
      summary: Get the Timeslots and their availability for a given Picking Location
      description: This endpoint allows retailers to retrieve the available timeslots for a given picking location. The retailer can specify the picking location by passing its identifier in the id query parameter. The fromDate parameter is used to specify the starting date of the timeslots to be retrieved. The date must be in ISO 8601 format. The quantity parameter limits the number of timeslots to be returned. Use this parameter to limit the request and retrieve just the nearest available timeslots.
      operationId: getTimeslotsAvailability
      tags:
        - timeslots
      parameters:
        - name: pickingLocationId
          in: query
          description: Picking Location identifier
          required: true
          schema:
            type: string
        - name: fromDate
          in: query
          required: true
          schema:
            type: string
            format: ISO 8601
        - name: quantity
          in: query
          required: true
          description: Number of Timeslots to be displayed
          schema:
            type: number
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeslotAvailability'
        '400':
          description: Invalid ID
  /timeslots/{id}/reservations:
    post:
      summary: Reserve a timeslot
      description: Create a new Timeslot reservation
      operationId: createTimeslotReservation
      tags:
        - timeslots
      parameters:
        - name: id
          in: path
          description: Timeslot identifier
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
             schema:
                $ref: '#/components/schemas/TimeslotReservation'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ID'
                  - $ref: '#/components/schemas/TimeslotReservation'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message
                  errorCode:
                    type: string
                    description: Error code
                    enum:
                      - "TIMESLOT_NOT_AVAILABLE"
                      - "TOTAL_ARTICLES_TOO_HEAVY"
                      - "INVALID_SHIPPING_ADDRESS"
                      - "INVALID_CUSTOMER_DATA"
                      - "INVALID_ARTICLE_ITEM_QUANTITY"
                      - "TOTAL_MISMATCH"
                  errors:
                    type: array
                    items:
                      type: string
                      description: List of error details
  
  /timeslots/{timeslotId}/reservations/{reservationId}/cancel:
    post:
      summary: Cancel a reservation of a given timeslot
      description: Cancel a reservation of a given timeslot
      operationId: cancelTimeslotReservation
      tags:
        - timeslots
      parameters:
        - name: timeslotId
          in: path
          description: Timeslot identifier
          required: true
          schema:
            type: string
        - name: reservationId
          in: path
          description: Timeslot Reservation identifier
          required: true
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
             schema:
                type: object
                properties:
                  reason:
                    type: object
                    properties:
                      code:
                        description: |-
                          - `CUSTOMER_DRIVEN`	The customer triggered the cancelation.
                          - `OMS_DRIVEN`	The OMS triggered the cancelation.
                          - `RETAILER_DRIVEN`	The retailer triggered the cancelation.
                          - `OTHER`	The cancelation was triggered by another source.
                        enum:
                          - CUSTOMER_DRIVEN
                          - OMS_DRIVEN
                          - RETAILER_DRIVEN
                          - OTHER
                      type:
                        type: string
                        description: Cancelation reasons type
                        enum: 
                          - 'payment failed'
                          - 'fraudulent customer'
                          - 'incorrect customer information'
                          - 'customer requested to cancel'
                          - 'too many out of stock items'
                          - 'system error'
                          - 'other'
                          - 'unknown'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeslotReservationCancelation'
                required: ['id', 'status', 'createdAt', 'timeslotReservation']
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message
                  errorCode:
                    type: string
                    description: Error code
                    enum:
                      - "TOO_LATE_TO_CANCEL"
                  errors:
                    type: array
                    items:
                      type: string
                      description: List of error details
        '404':
          description: Not Found


  #TODO: Timeslots
    #  possibilites :
    # /picking-locations/{id}/time-slots/availability
    # /picking-locations/{id}/time-slots/preview
    # /delivery-areas/{id}/time-slots/availability
    # /delivery-areas/{id}/time-slots/preview

    # /service-area/{id}/time-slots/availability
    # /service-area/{id}/time-slots/preview
    # /time-slots/availability
    # /slots-availability
    # service-availability/

    # /delivery-areas/{id}/schedules/preview

    # /time-slots/next
    # /time-slots/next-available
    # /time-slots/preview

  # Orders
  /orders:
    post:
      summary: Create a new order
      description: Create a new order with the provided information
      operationId: createOrder
      tags:
        - orders
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ID'
                  - $ref: '#/components/schemas/Order'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message
                  errorCode:
                    type: string
                    description: Error code
                    enum:
                      - "TIMESLOT_NOT_AVAILABLE"
                      - "ORDER_TOO_HEAVY"
                      - "INVALID_SHIPPING_ADDRESS"
                      - "INVALID_CUSTOMER_DATA"
                      - "INVALID_PRODUCT_QUANTITY"
                      - "ORDER_TOTAL_MISMATCH"
                      - "DUPLICATED_ORDER"
                  errors:
                    type: array
                    items:
                      type: string
                      description: List of error details
   
  /orders/{id}:
     get:
      summary: Get an order
      description: Retrieves order details by order ID.
      operationId: getOrderById
      tags:
        - orders
      parameters:
        - name: id
          in: path
          description: Order identifier
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found
     
     patch:
      summary: Update an existing order
      description: Update an existing order with the provided information
      operationId: updateOrder
      tags:
        - orders
      parameters:
        - name: id
          in: path
          description: Order identifier
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ID'
                  - $ref: '#/components/schemas/Order'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message
                  errorCode:
                    type: string
                    description: Error code
                    enum:
                      - "TIMESLOT_NOT_AVAILABLE"
                      - "ORDER_TOO_HEAVY"
                      - "INVALID_SHIPPING_ADDRESS"
                      - "INVALID_CUSTOMER_DATA"
                      - "INVALID_PRODUCT_QUANTITY"
                      - "ORDER_TOTAL_MISMATCH"
                      - "DUPLICATED_ORDER"
                  errors:
                    type: array
                    items:
                      type: string
                      description: List of error details

  /orders/{id}/cancel:
    post:
      summary: Cancel an order
      description: Cancel an order
      operationId: cancelOrder
      tags:
        - orders
      parameters:
        - name: id
          in: path
          description: Order identifier
          required: true
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  type: object
                  properties:
                    code:
                      description: |-
                        Cancelation reason code:
                        - `CUSTOMER_DRIVEN`	The customer triggered the cancelation.
                        - `OMS_DRIVEN`	The OMS triggered the cancelation.
                        - `RETAILER_DRIVEN`	The retailer triggered the cancelation.
                        - `SHOPPER_DRIVEN`	The shopper triggered the cancelation.
                        - `OTHER`	The cancelation was triggered by another source.
                      enum:
                        - CUSTOMER_DRIVEN
                        - OMS_DRIVEN
                        - RETAILER_DRIVEN
                        - SHOPPER_DRIVEN
                        - OTHER
                    type:
                      type: string
                      description: Cancelation reason type
                      enum: 
                        - 'duplicate order'
                        - 'customer requested since order is early'
                        - 'customer requested since order is late'
                        - 'customer is unavailable'
                        - 'customer requested to cancel'
                        - 'shopper unable to complete order'
                        - 'shopper could not find address'
                        - 'too many out of stock items'
                        - 'canceled by retailer'
                        - 'fraudulent customer'
                        - 'store early closure'
                        - 'system error'
                        - 'other'
                        - 'unknown'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderCancelation'
                required: ['id', 'status', 'createdAt', 'order']
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message
                  errorCode:
                    type: string
                    description: Error code
                    enum:
                      - "ALREADY_CANCELED"
                      - "TOO_LATE_TO_CANCEL"
                      - "INVALID_REASON"
                  errors:
                    type: array
                    items:
                      type: string
                      description: List of error details
        '404':
          description: Order Not Found
  
    
  /webhooks/subscriptions/event-types:
    get:
      summary: List webhook event types
      description: Endpoint to see all the event types that you can subscribe to.
      operationId: listWebhookEventTypes
      tags:
        - webhooks
      parameters: []
      responses:
        '200':
          description: OK
          
  # TODO: add this to test subscription
  # /webhooks/subscriptions/{id}/test:
  #   post:
  #     summary: Test webhook subscription
  #     description: Tests a webhook subscription by sending a test event to the notification URL.
  #     operationId: testWebhookSubscription
  #     tags:
  #       - webhooks
  #     parameters: []
  #     responses:
  #       '200':
  #         description: OK


  /webhooks/subscriptions:
    get:
      summary: List webhook subscriptions
      description: Lists all webhook subscriptions owned by an application.
      operationId: listWebhookSubscription
      tags:
        - webhooks
      parameters: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  subscriptions:
                    $ref: '#/components/schemas/Subscriptions'
                    example: []
        '400':
          description: Bad Request


    post:
      summary: Create new webhook subscription
      description: |-
        Subscribe to receive events. 
        Use this endpoint to add your notification URL and list of events that you want your application to subscribe to.
      operationId: createWebhookSubscription
      tags:
        - webhooks
      parameters: []
      responses:
        '200':
          description: OK

  /webhooks/subscriptions/{id}:  
    get:
      summary: Get webhook subscription
      description: Retrieves a webhook subscription identified by its ID.
      operationId: getWebhookSubscription
      tags:
        - webhooks
      parameters:
        - name: id
          in: path
          description: Webhook subscription identifier
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
    put:
      summary: Update webhook subscription
      description: Updates a webhook subscription.
      operationId: updateWebhookSubscription
      tags:
        - webhooks
      parameters:
        - name: id
          in: path
          description: Webhook subscription identifier
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
    delete:
      summary: Delete webhook subscription
      description: Deletes a webhook subscription.
      operationId: deleteWebhookSubscription
      tags:
        - webhooks
      parameters:
        - name: id
          in: path
          description: Webhook subscription identifier
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
      
components:
  schemas:

    AccessToken:
      type: object
      properties:
        token:
          type: string
        tokenType:
          type: string
        scope:
          type: string
        expiresIn:
          type: number
        createdAt:
          type: string
          format: ISO 8601

    PickingLocation:
      type: object
      properties:
        id:
          type: string
          readOnly: true
          description: The unique identifier of the Picking Location
        name:
          type: string
          description: The name of the Picking Location.
          example: "Main Street Store"
        coords:
          $ref: '#/components/schemas/GeoCoordinates'
        postalCode:
          type: string
          description: The postal code of the Picking Location
          example: "90210"
        addressLine1:
          type: string
          description: The first line of the address of the Picking Location (usually identifies the street's name and door number)
          example: "123 Main St"
        addressLine2:
          type: string
          description: The second line of the address of the Picking Location (usually identifies floor/apartment numbers and any other relevant address information)
          example: "Suite 456"
        countryCode:
          type: string
          format: ISO 3166-1
          description: The country code of the Picking Location
          example: "PL"
        personOfContact:
          type: string
          description: The person of contact at the Picking Location
          example: "John Smith"
        email:
          type: string
          format: email
          description: The email of the person of contact
          example: "john.smith@mainstreetstore.com"
        phone:
          type: string
          format: phone
          description: The phone number of the person of contact (should include phone country code)
          example: "+1 555 555 5555"
        hasParking:
          type: boolean
          description: Indicates if the Picking Location has parking available
          example: true
        status:
          type: string
          enum: [operating, closed, unpublished]
          description: The status of the Picking Location, whether it is operating or closed. The `unpublished` status indicates a Picking Location will not be displayed when querying for service availability. Useful for inputting data into the system without immediately making it available to the public.
          example: "operating"


    PickingLocationSchedule:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the Picking Location
        openingHours:
          type: array
          description: An array of objects that represent the opening days and hours of the Picking Location.
          items:
            type: object
            properties:
              day:
                type: string
                enum: [monday, tuesday, wednesday, thursday, friday, saturday, sunday]
                description: The day of the week.
              schedule:
                type: array
                description: An array of objects that represent the opening days and hours of the Picking Location.
                items:
                  type: object
                  properties:
                    start:
                      type: string
                      format: time
                      description: The starting time of the schedule block.
                      example: "09:00:00"
                    end:
                      type: string
                      format: time
                      description: The ending time of the schedule block
                      example: "17:00:00"
          example: [{ "day": "monday", schedule: [{"start": "09:00:00", "end": "12:00:00"},{"start": "15:00:00", "end": "17:00:00"}]}, { "day": "saturday", schedule: [{"start": "09:00:00", "end": "12:00:00"}, {"start": "13:00:00", "end": "17:00:00"}] }]
        closedDays:
          type: array
          description: An array of dates when the Picking Location will be closed.
          example: ["2022-12-25", "2022-12-26"]
          items:
            type: string
            format: date

    DeliveryArea:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        coords:
          $ref: '#/components/schemas/GeoCoordinates'
        countryCode:
          type: string
          format: ISO 3166-1

    GeoCoordinates:
      type: object
      properties:
        lat:
          type: number
          description: Latitude in decimal degrees
        lon:
          type: number
          description: Longitude in decimal degrees

    Capacity:
      type: object
      properties:
        total:
          type: number
          description: Total capacity of the location
          example: 100
        occupied:
          type: number
          description: Occupied capacity of the location
          example: 20

    Timeslot:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of the Timeslot
          example: "slot1"
        fromDate:
          type: string
          format: ISO 8601
          description: The starting time of the Timeslot
          example: "2023-01-11T14:00:00+00:00"
        toDate:
          type: string
          format: ISO 8601
          description: The ending time of the Timeslot
          example: "2023-01-11T15:00:00+00:00"

    TimeslotAvailability:
      type: array
      items:
        type: object
        properties:
          timeslot:
            $ref: '#/components/schemas/Timeslot'
          capacity:
            $ref: '#/components/schemas/Capacity'
          available:
            type: boolean
            description: Indicates if the user can book this Timeslot.
            example: true

    TimeslotReservation:
      type: object
      properties:
        timeslotId:
          type: string
          description: The Timeslot's identifier selected for the Order
          example: "slot2"
        serviceType:
          $ref: '#/components/schemas/ServiceType'
        articles:
          type: array
          items:
            $ref: '#/components/schemas/OrderArticle'
          description: The array of articles included in the Order
        customerInfo:
          $ref: '#/components/schemas/CustomerInfo'
          description: The customer information related to the Order
        shippingAddress:
          $ref: '#/components/schemas/ShippingAddress'
          description: Where the Order should be delivered.
        totalPrice:
          type: number
          format: currency
          description: The total price of the Order
          example: 119.9
        estimatedWeight:
          type: number
          format: weight
          description: The estimated weight of the Order
          example: 12.5

    TimeslotReservationCancelation:
      type: object
      properties:
        id:
          type: string
          description: The cancelation identifier
        status:
          type: string
          example: "canceled"
        reason:
          type: object
          description: The cancelation reason
          properties:
            code:
              type: string
            type:
              type: string
        timeslotReservation:
          allOf:
           - $ref: '#/components/schemas/ID'
           - $ref: '#/components/schemas/TimeslotReservation'
        createdAt:
          type: string
          format: ISO 8601

    Schedule:
      type: object
      properties:
        id:
          type: string
        slots:
          type: array
          items:
            $ref: '#/components/schemas/TimeslotAvailability'

    OrderArticle:
      type: object
      properties:
        sku:
          type: string
          description: Stock Keeping Unit of the Product
          example: "12345"
        requestedQuantity:
          type: number
          description: Requested quantity of the Product
          example: 10
        customerNote:
          type: string
          description: A description of any request from the customer.
          example: "I want it in small slices"
        discount:
          type: number
          format: percent
          description: The discount applied to the product
          example: 0.1
        buyingPrice:
          type: number
          format: currency
          description: The buying price of the product
          example: 10.99
        unitPrice:
          type: number
          format: currency
          description: The unit price of the product
          example: 11.99
        totalPrice:
          type: number
          format: currency
          description: The total price of the product considering the quantity
          example: 119.9
        estimatedWeight:
          type: number
          format: weight
          description: The estimated weight of the product
          example: 12.5
        replacementPreferences:
          type: array
          items:
            type: string
            description: An array of preferred Stock Keeping Units to replace this Product in the case of a stockout.
          example: ["53234", "232321"]

    CustomerInfo:
      type: object
      properties:
        customerName:
          type: string
          description: The name of the Customer
          example: "John Smith"
        customerId:
          type: string
          description: The unique identifier of the Customer
          example: "customer1"
        email:
          type: string
          format: email
          description: The email of the Customer
          example: "john.smith@example.com"
        phone:
          type: string
          format: phone
          description: The phone number of the Customer (should include phone country code)
          example: "+1 (555) 555-5555"
        billingName:
          type: string
          description: The name of the Customer for billing purposes
          example: "John Smith"
        billingAddress:
          type: string
          description: The billing address of the Customer
          example: "123 Main St, Suite 200, Anytown USA 12345"
        vatNumber:
          type: string
          description: The VAT number of the Customer, if applicable
          example: "1234567890"

    ShippingAddress:
      type: object
      properties:
        addressLine1:
          type: string
          description: The first address line of the Shipping Address
          example: "123 Main St"
        addressLine2:
          type: string
          description: The second address line of the Shipping Address
          example: "Suite 200"
        additionalInfo:
          type: string
          description: Any additional info that the customer would like to specify
          example: "If I am not at home please deliver it to the neighbor in Suite 201"
        city:
          type: string
          description: The city of the Shipping Address
          example: "Warsaw"
        state:
          type: string
          description: The state or province of the Shipping Address
          example: "Poland"
        postalCode:
          type: string
          description: The postal code of the Shipping Address
          example: "123-545"
        coords:
          $ref: '#/components/schemas/GeoCoordinates'
    
    Order:
      type: object
      properties:
        timeslotId:
          type: string
          description: The Timeslot's identifier selected for the Order
          example: "slot2"
        articles:
          type: array
          items:
            $ref: '#/components/schemas/OrderArticle'
          description: The array of articles included in the Order
        customerInfo:
          $ref: '#/components/schemas/CustomerInfo'
          description: The customer information related to the Order
        shippingAddress:
          $ref: '#/components/schemas/ShippingAddress'
          description: Where the Order should be delivered.
        totalPrice:
          type: number
          format: currency
          description: The total price of the Order
          example: 119.9
        estimatedWeight:
          type: number
          format: weight
          description: The estimated weight of the Order
          example: 12.5

    OrderCancelation:
      type: object
      properties:
        id:
          type: string
          description: The order cancelation unique identifier
        status:
          type: string
          example: "canceled"
        reason:
          type: object
          description: The cancelation reason
          properties:
            code:
              type: string
            type:
              type: string
        order:
          allOf:
           - $ref: '#/components/schemas/ID'
           - $ref: '#/components/schemas/Order'
        createdAt:
          type: string
          format: ISO 8601
        
    ServiceType:
      type: string
      enum: [delivery, picking]
      description: The logistical service type offered; `delivery` means that picking and delivering goods through couriers is supported; `picking` means that only picking up goods from picking locations is supported.

    ServiceAvailability:
      type: array
      properties:
        items:
          type: object
          properties:
            serviceType:
              $ref: '#/components/schemas/ServiceType'
            deliveryAreaId:
              type: string
              description: The Delivery Area identifier.Nnecessary to request `delivery` Timeslots
            pickingLocationIds:
              type: array
              description: An array of Picking Location identifiers where the service type is available. Necessary to identify which product assortment to show the customer. In the case of the `delivery` service type, it will be a single identifier  corresponding to the Picking Location closest to the delivery location.
              items:
                type: string
                description: The Picking Location identifier.
    ID:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier
          example: "uuid"

    Subscriptions:
      type: array
      properties:
        items:
          type: object
          properties:
            eventTypes: 
              type: array
              items:
                type: string
              example: [ "order.created", "order.updated"]
            notificationUrl: 
              example: "https://retailer.example-webhook-url.com"
            createdAt:
              type: string
              format: ISO 8601
            updatedAt:
              type: string
              format: ISO 8601
            id:
              $ref: '#/components/schemas/ID'
            name:
              type: string
              example: "Example Webhook Subscription"
            enabled:
              type: boolean
    

    ApiResponse:
      type: object
      properties:
        code:
          type: number
          format: int32
        type:
          type: string
        message:
          type: string
