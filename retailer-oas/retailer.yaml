openapi: 3.0.3
info:
  title: Retailer API [DRAFT]
  description: |-
    This is the official OpenAPI specification for Retailer API V1.

    ## Concepts
    TBD w/ Product
    - Picking Location:
    - Delivery Area:
    - Order:
    - Time Slot:

  version: 1.0.0
servers:
  - url: https://api.example.com/retailer/v1
    description: Production server (live data)
  - url: https://sandbox-api.example.com/v1
    description: Sandbox server (test data)
tags:
  - name: auth
  - name: delivery-areas
  - name: picking-locations
  - name: orders
paths:
  # Authentication
  /oauth/token:
    post:
      tags:
        - auth
      summary: Generate an access token
      description: |
        Returns a new access token.

        The access token must be included in all other requests as a Bearer token for authentication purposes.

        Before you start, make sure you have been given a `clientId` and `clientSecret`.

        The token is valid for ***[X time]***. During this period, reuse the same token. After that, a new token must be generated.
      operationId: generateAccessToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                clientId:
                  type: string
                clientSecret:
                  type: string
                grantType:
                  type: string
                scope:
                  type: string
                code:
                  type: string
                redirectUri:
                  type: string
              required:
                - clientId
                - clientSecret
                - grantType
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessToken'
  /oauth/token/revoke:
    post:
      tags:
        - auth
      summary: Revoke an access token
      description: |
        Revokes any access token.

        You need to include your `clientId` and secret and the access token in the request body.
      operationId: revokeAccessToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                clientId:
                  type: string
                clientSecret:
                  type: string
                token:
                  type: string
              required:
                - clientId
                - clientSecret
                - token
      responses:
        200:
          description: OK

  # Service availability
  /service-availability:
    get:
      summary: Check service availability
      description: Return service availability information for a given postal code.
      operationId: checkAvailability
      tags:
        - service-availability
      parameters:
        - name: postalCode
          in: query
          description: The postal code to check service availability for.
          required: true
          type: string
        - name: countryCode
          in: query
          description: The ISO 3166 country code corresponding to the given postal code.
          required: true
          type: string
          format: ISO 3166-1

      responses:
        200:
          description: Service is available for the given postal code.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    serviceType:
                      type: string
                      enum: [delivery, picking]
                      description: The logistical service type offered; `delivery` means that picking and delivering goods through couriers is supported; `picking` means that only picking up goods from picking locations is supported.
                    deliveryAreaId:
                      type: string
                      description: The Delivery Area identifier.Nnecessary to request `delivery` TimeSlots
                    pickingLocationIds:
                      type: array
                      description: An array of Picking Location identifiers where the service type is available. Necessary to identify which product assortment to show the customer. In the case of the `delivery` service type, it will be a single identifier  corresponding to the Picking Location closest to the delivery location.
                      items:
                        type: string
                        description: The Picking Location identifier.
        400:
          description: Invalid postal code or country code format.
        404:
          description: Service not available for the given postal code and country code.

  # Picking Locations
  /picking-locations:
    post:
      summary: Create a Picking Location
      description: Create a Picking Location.
      operationId: createPickingLocation
      tags:
        - picking-locations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PickingLocation'
              required:
                - name
                - coords
                - postalCode
                - addressLine1
                - countryCode
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PickingLocation'
                description: The created picking location object
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid request, some fields are missing"


  /picking-locations/{id}:
    get:
      summary: Find a Picking Location by identifier
      description: Get a single Picking Location for a given identifier.
      operationId: findPickingLocationById
      tags:
        - picking-locations
      parameters:
        - name: id
          in: path
          description: Picking location identifier
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PickingLocation'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid request, some fields are missing"
        404:
          description: Picking Location not found

    patch:
      summary: Update an existing Picking Location
      description: Update a Picking Location for a given identifier.
      operationId: updatePickingLocation
      tags:
        - picking-locations
      parameters:
        - name: id
          in: path
          description: Picking Location identifier
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              schema:
                $ref: '#/components/schemas/PickingLocation'
                required:
                  - name
                  - coords
                  - postalCode
                  - addressLine1
                  - countryCode
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PickingLocation'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid request, some fields are missing"
        404:
          description: Picking Location not found

    delete:
      summary: Delete an existing Picking Location
      description: Update a Picking Location for a given identifier.
      operationId: deletePickingLocation
      tags:
        - picking-locations
      parameters:
        - name: id
          in: path
          description: Picking Location identifier
          required: true
          schema:
            type: string
      responses:
        204:
          description: No Content
        404:
          description: Picking Location not found

  /picking-locations/{id}/schedule:
    get:
      summary: Get a Picking Location's Schedule
      description: Get the opening hours and closed days of a Picking Location.
      operationId: getPickingLocationSchedule
      tags:
        - picking-locations
      parameters:
        - name: id
          in: path
          description: Picking location identifier
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PickingLocationSchedule'
        404:
          description: Picking Location not found

    post:
      summary: Create a Picking Location Schedule
      description: Set opening hours and closed days of a Picking Location.
      operationId: createPickingLocationSchedule
      tags:
        - picking-locations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PickingLocationSchedule'
              required:
                - id
                - openingHours
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Picking Location schedule updated successfully"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid request, some fields are missing"
        404:
          description: Picking Location not found

    patch:
      summary: Update a Picking Location Schedule
      description: Update opening hours and closed days of a Picking Location.
      operationId: updatePickingLocationSchedule
      tags:
        - picking-locations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PickingLocationSchedule'
              required:
                - id
                - openingHours
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Picking Location schedule updated successfully"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid request, some fields are missing"
        404:
          description: Picking Location not found

  # Delivery Areas
  /delivery-areas/{id}:
    get:
      summary: Find a Delivery Area by identifier
      description: Get a single Delivery Area for a given identifier.
      operationId: findDeliveryAreaById
      tags:
        - delivery-areas
      parameters:
        - name: id
          in: path
          description: Delivery Area identifier
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeliveryArea'

  /delivery-areas/{id}/timeslots:
    get:
      summary: Get the Time Slots and their availability for a given Delivery Area
      description: Returns the delivery Time Slots available for a given Delivery Area and date.
      operationId: getTimeSlotsAvailability
      tags:
        - delivery-areas
      parameters:
        - name: id
          in: path
          description: Delivery Area identifier
          required: true
          schema:
            type: string
        - name: fromDate
          in: query
          required: true
          schema:
            type: string
            format: ISO 8601
        - name: quantity
          in: query
          required: true
          description: Number of Time Slots to be displayed
          schema:
            type: number
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeSlotAvailability'
        400:
          description: Invalid ID

  #TODO: Time Slots
    #  possibilites :
    # /picking-locations/{id}/time-slots/availability
    # /picking-locations/{id}/time-slots/preview
    # /delivery-areas/{id}/time-slots/availability
    # /delivery-areas/{id}/time-slots/preview

    # /service-area/{id}/time-slots/availability
    # /service-area/{id}/time-slots/preview
    # /time-slots/availability
    # /slots-availability
    # service-availability/

    # /delivery-areas/{id}/schedules/preview

    # /time-slots/next
    # /time-slots/next-available
    # /time-slots/preview

  # Orders
  /orders:
    post:
      summary: Create a new order
      description: Create a new order with the provided information
      operationId: createOrder
      tags:
        - orders
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message
                  errorCode:
                    type: string
                    description: Error code
                    enum:
                      - "TIMESLOT_NOT_AVAILABLE"
                      - "ORDER_TOO_HEAVY"
                      - "INVALID_SHIPPING_ADDRESS"
                      - "INVALID_CUSTOMER_DATA"
                      - "INVALID_PRODUCT_QUANTITY"
                      - "ORDER_TOTAL_MISMATCH"
                      - "DUPLICATED_ORDER"
                  errors:
                    type: array
                    items:
                      type: string
                      description: List of error details

components:
  schemas:

    AccessToken:
      type: object
      properties:
        token:
          type: string
        tokenType:
          type: string
        scope:
          type: string
        expiresIn:
          type: number
        createdAt:
          type: date

    PickingLocation:
      type: object
      properties:
        id:
          type: string
          readOnly: true
          description: The unique identifier of the Picking Location
        name:
          type: string
          description: The name of the Picking Location.
          example: "Main Street Store"
        coords:
          $ref: '#/components/schemas/GeoCoordinates'
        postalCode:
          type: string
          description: The postal code of the Picking Location
          example: "90210"
        addressLine1:
          type: string
          description: The first line of the address of the Picking Location (usually identifies the street's name and door number)
          example: "123 Main St"
        addressLine2:
          type: string
          description: The second line of the address of the Picking Location (usually identifies floor/apartment numbers and any other relevant address information)
          example: "Suite 456"
        countryCode:
          type: string
          format: ISO 3166-1
          description: The country code of the Picking Location
          example: "PL"
        personOfContact:
          type: string
          description: The person of contact at the Picking Location
          example: "John Smith"
        email:
          type: string
          format: email
          description: The email of the person of contact
          example: "john.smith@mainstreetstore.com"
        phone:
          type: string
          format: phone
          description: The phone number of the person of contact (should include phone country code)
          example: "+1 555 555 5555"
        hasParking:
          type: boolean
          description: Indicates if the Picking Location has parking available
          example: true
        status:
          type: string
          enum: [operating, closed, unpublished]
          description: The status of the Picking Location, whether it is operating or closed. The `unpublished` status indicates a Picking Location will not be displayed when querying for service availability. Useful for inputting data into the system without immediately making it available to the public.
          example: "active"


    PickingLocationSchedule:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the Picking Location
        openingHours:
          type: array
          description: An array of objects that represent the opening days and hours of the Picking Location.
          items:
            type: object
            properties:
              day:
                type: string
                enum: [monday, tuesday, wednesday, thursday, friday, saturday, sunday]
                description: The day of the week.
              schedule:
                type: array
                description: An array of objects that represent the opening days and hours of the Picking Location.
                items:
                  type: object
                  properties:
                    start:
                      type: string
                      format: time
                      description: The starting time of the schedule block.
                      example: "09:00:00"
                    end:
                      type: string
                      format: time
                      description: The ending time of the schedule block
                      example: "17:00:00"
          example: [{ "day": "monday", schedule: [{"start": "09:00:00", "end": "17:00:00"}]}, { "day": "saturday", schedule: [{"start": "09:00:00", "end": "12:00:00"}, {"start": "13:00:00", "end": "17:00:00"}] }]
        closedDays:
          type: array
          description: An array of dates when the Picking Location will be closed.
          example: ["2022-12-25", "2022-12-26"]
          items:
            type: string
            format: date

    DeliveryArea:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        coords:
          $ref: '#/components/schemas/GeoCoordinates'
        countryCode:
          type: string
          format: ISO 3166-1

    GeoCoordinates:
      type: object
      properties:
        lat:
          type: number
          description: Latitude in decimal degrees
        lon:
          type: number
          description: Longitude in decimal degrees

    Capacity:
      type: object
      properties:
        total:
          type: number
          description: Total capacity of the location
          example: 100
        occupied:
          type: number
          description: Occupied capacity of the location
          example: 20

    TimeSlot:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of the Time Slot
          example: "slot1"
        fromDate:
          type: string
          format: ISO 8601
          description: The starting time of the Time Slot
          example: "2023-01-11T14:00:00+00:00"
        toDate:
          type: string
          format: ISO 8601
          description: The ending time of the Time Slot
          example: "2023-01-11T15:00:00+00:00"

    TimeSlotAvailability:
      type: array
      items:
        type: object
        properties:
          timeSlot:
            $ref: '#/components/schemas/TimeSlot'
          capacity:
            $ref: '#/components/schemas/Capacity'
          available:
            type: boolean
            description: Indicates if the user can book this Time Slot.
            example: true

    Schedule:
      type: object
      properties:
        id:
          type: string
        slots:
          type: array
          items:
            $ref: '#/components/schemas/TimeSlotAvailability'

    OrderArticle:
      type: object
      properties:
        sku:
          type: string
          description: Stock Keeping Unit of the Product
          example: "12345"
        requestedQuantity:
          type: number
          description: Requested quantity of the Product
          example: 10
        customerNote:
          type: string
          description: A description of any request from the customer.
          example: "I want it in small slices"
        discount:
          type: number
          format: percent
          description: The discount applied to the product
          example: 0.1
        buyingPrice:
          type: number
          format: currency
          description: The buying price of the product
          example: 10.99
        unitPrice:
          type: number
          format: currency
          description: The unit price of the product
          example: 11.99
        totalPrice:
          type: number
          format: currency
          description: The total price of the product considering the quantity
          example: 119.9
        estimatedWeight:
          type: number
          format: weight
          description: The estimated weight of the product
          example: 12.5
        replacementPreferences:
          type: array
          items:
            type: string
            description: An array of preferred Stock Keeping Units to replace this Product in the case of a stockout.
            example: ['53234', '232321']

    CustomerInfo:
      type: object
      properties:
        customerName:
          type: string
          description: The name of the Customer
          example: "John Smith"
        customerId:
          type: string
          description: The unique identifier of the Customer
          example: "customer1"
        email:
          type: string
          format: email
          description: The email of the Customer
          example: "john.smith@example.com"
        phone:
          type: string
          format: phone
          description: The phone number of the Customer (should include phone country code)
          example: "+1 (555) 555-5555"
        billingName:
          type: string
          description: The name of the Customer for billing purposes
          example: "John Smith"
        billingAddress:
          type: string
          description: The billing address of the Customer
          example: "123 Main St, Suite 200, Anytown USA 12345"
        vatNumber:
          type: string
          description: The VAT number of the Customer, if applicable
          example: "1234567890"

    ShippingAddress:
      type: object
      properties:
        addressLine1:
          type: string
          description: The first address line of the Shipping Address
          example: "123 Main St"
        addressLine2:
          type: string
          description: The second address line of the Shipping Address
          example: "Suite 200"
        additionalInfo:
          type: string
          description: Any additional info that the customer would like to specify
          example: "If I am not at home please deliver it to the neighbor in Suite 201"
        city:
          type: string
          description: The city of the Shipping Address
          example: "Warsaw"
        state:
          type: string
          description: The state or province of the Shipping Address
          example: "Poland"
        postalCode:
          type: string
          description: The postal code of the Shipping Address
          example: "123-545"
        coords:
          $ref: '#/components/schemas/GeoCoordinates'

    Order:
      type: object
      properties:
        orderId:
          type: string
          description: The unique identifier of the Order
          example: "order1"
        timeSlot:
          $ref: '#/components/schemas/TimeSlot'
          description: The Time Slot selected for the Order
        articles:
          type: array
          items:
            $ref: '#/components/schemas/OrderArticle'
          description: The array of articles included in the Order
        customerInfo:
          $ref: '#/components/schemas/CustomerInfo'
          description: The customer information related to the Order
        shippingAddress:
          $ref: '#/components/schemas/CustomerInfo'
          description: Where the Order should be delivered.
        totalPrice:
          type: number
          format: currency
          description: The total price of the Order
          example: 119.9
        estimatedWeight:
          type: number
          format: weight
          description: The estimated weight of the Order
          example: 12.5

    ApiResponse:
      type: object
      properties:
        code:
          type: number
          format: int32
        type:
          type: string
        message:
          type: string
